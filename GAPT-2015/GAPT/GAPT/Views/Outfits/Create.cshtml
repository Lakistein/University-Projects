@using GAPT.Models
@model GAPT.Models.Outfit

@{
    ViewBag.Title = "Create";
}

<div id="form" style="visibility: hidden">
    <div class="form-group">
        <div class="control-label col-md-2" style="visibility: hidden;">Items</div><div class="col-md-10">
            <select class="form-control" name="items" style="display: inline">
                @foreach(Item i in ViewBag.Items)
                {
                    <option value="@i.Id">@i.Name</option>
                }
            </select>
            <span class="btn btn-adn" onclick="removeItem(this)">-</span>
        </div>
    </div>
</div>

<h2>Create</h2>


@using(Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Outfit</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Price, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.Price, "", new {@class = "text-danger"})
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsFemale, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsFemale, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsFemale, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsChild, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsChild, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsChild, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="control-label col-md-2">Items</div>
            <span class="btn btn-default " onclick=" addItem() ">+</span><br />
        </div>

        <div id="itemContainer">

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    var counter = 0;

    function addItem() {
        var items = document.getElementById("form").firstElementChild.cloneNode(true);
        items.id = counter++;
        document.getElementById("itemContainer").appendChild(items);
    }

    function removeItem(el) {
        document.getElementById(el.parentNode.parentNode.id).remove();
    }
</script>