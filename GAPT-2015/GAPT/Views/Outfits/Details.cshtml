@using GAPT.Models
@model GAPT.Models.Outfit

@{
    ViewBag.Title = "Details";

}

<div>
    <div id="asd" style="visibility: hidden">@ViewBag.Arr</div>
    <div id="model" style="right: 200px; top: 100px; position: absolute"></div>

    <h4>Outfit Details</h4>
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Price)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Price)
        </dd>
        <dd>Items:</dd>
        @foreach(Item o in Model.Items)
        {
            <dd>
                @Html.ActionLink(o.Name, "Details", "Items", new { @id = o.Id }, new { @class = "col-md-2" })
                Price: @o.Price
                @Html.ActionLink("Add to cart", "AddProduct", "ShoppingCart", new { @id = o.Id, @type = "Item" }, new { @class = "col-md-2" })
            </dd>
        }

    </dl>
</div>
<p class="btn btn-default">
    @Html.ActionLink("Add to cart", "AddProduct", "ShoppingCart", new { @id = Model.Id, @type = "Outfit" }, "")
</p>
<p>
    @if(Request.IsAuthenticated)
    {
        @Html.ActionLink("Edit", "Edit", new { id = Model.Id })
        <text>|</text>
    }
    @Html.ActionLink("Back to List", "Index")
</p>

<script src="~/Scripts/three.min.js"></script>
<script src="~/Scripts/OrbitControls.js"></script>
<script>
    var scene, camera, renderer;
    var objects = [];
    var newObjects = [];
    init();
    animate();
    Initialize();

    function init() {
        scene = new THREE.Scene();
        var WIDTH = window.innerWidth / 4,
            HEIGHT = window.innerHeight / 2;

        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(WIDTH, HEIGHT);
        document.getElementById("model").appendChild(renderer.domElement);


        camera = new THREE.PerspectiveCamera(45, WIDTH / HEIGHT, 0.1, 1000);
        camera.position.set(0, 10, 25);
        scene.add(camera);

        window.addEventListener("resize", function () {
            var WIDTH = window.innerWidth / 4,
                HEIGHT = window.innerHeight / 2;
            renderer.setSize(WIDTH, HEIGHT);
            camera.aspect = WIDTH / HEIGHT;
            camera.updateProjectionMatrix();

        });


        renderer.setClearColor(0x333F47, 1);

        var light = new THREE.PointLight(0xffffff, 0.5, 100);
        light.position.set(0, 0, 50);
        scene.add(light);

        var lightt = new THREE.AmbientLight(0xffffff);
        lightt.color.setRGB(lightt.color.r * 0.7, lightt.color.g * 0.7, lightt.color.b * 0.7);
        scene.add(lightt);

        controls = new THREE.OrbitControls(camera, renderer.domElement);
    }

    function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
        controls.update();
    }

    var loader;

    function Initialize() {
        loader = new THREE.JSONLoader();
        objects = [];
        var arr = document.getElementById("asd").innerHTML;
        var objs = arr.split("~");
        var isFemale = objs[0].split(",")[0] === "F";
        objs[0] = objs[0].slice(2, objs[0].length - 1);
        var isChild = objs[0].split(",")[0] === "C";
        objs[0] = objs[0].slice(2, objs[0].length - 1);
        var s = (isChild) ? "child" : ((isFemale) ? "w" : "");

        loadModel("longsleeveshirt" + s, "Short Sleeved Shirt-shirts");
        loadModel("shortsleeveshirt" + s, "Short Sleeved Shirt-shirts");
        loadModel("poloshirt" + s, "Polo Shirt-shirts");
        loadModel("jacket" + s, "Suit Jacket-jackets");
        loadModel("hat" + s, "hat-hats");
        loadModel("shoes" + s, "Shoes-shoes");
        loadModel("tie" + s, "tie-ties");
        (isChild || isFemale) ? loadModel("shorts" + s, "Trousers-legs") : loadModel("jeans", "Jeans-legs");
        loadHuman((isChild) ? "child" : ((isFemale) ? "woman" : "model"));
       
        var count = 0;
        loader.onLoadComplete = function () {
            count++;
            if (count === 9)
                enableObject(objs);
        }
    }
    function loadHuman(name) {
        var s = @Url.Content("~/3DModels/") +name + ".json";
        loader.load(s, function (geometry) {
            var material = new THREE.MeshLambertMaterial({ color: 0xffcd94 });
            mesh = new THREE.Mesh(geometry, material);
            scene.add(mesh);
        });
    }
    function loadModel(modelath, name) {
        var s = @Url.Content("~/3DModels/") +modelath + ".json";
        loader.load(s, function (geometry) {
            var material = new THREE.MeshLambertMaterial({ color: 0xBBBBBB });
            mesh = new THREE.Mesh(geometry, material);
            mesh.visible = false;
            mesh.name = name;
            objects.push(mesh);
            scene.add(mesh);
        });
    }

    function enableObject(objs) {
        for (var i = 0; i < objs.length; i++) {
            if (!containsObject(objs[i].split(",")[1]))
                for (var k = 0; k < objects.length; k++) {
                    if (objs[i].split(",")[0].toLowerCase() === objects[k].name.split("-")[0].toLowerCase()) {
                        objects[k].material.color.setHex(objs[i].split(",")[2].replace("#", "0x"));
                        objects[k].visible = true;
                        newObjects.push(objects[k]);
                    }
                }
        }
    }

    function containsObject(objectType) {
        for (var i = 0; i < newObjects.length; i++)
            if (newObjects[i].name.split("-")[1].toLowerCase() === objectType.toLowerCase())
                return true;
        return false;
    }
</script>